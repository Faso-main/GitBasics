from aiogram import types, Router, F
from aiogram.fsm.context import FSMContext
from Handlers.Keyboards import create_keyboard, make_row_keyboard
from LM.LLM_TEST import response
from datetime import datetime, timedelta
from aiogram.types import ReplyKeyboardRemove
from aiogram.fsm.state import State,StatesGroup
from LM.Google_sheets import gs
from Main_itr1 import SERVER_TIME
import logging, re


logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class Survey(StatesGroup):
    question = State()
    direct_to_LLM=State()

router_Survey = Router()

response_generic = '–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –º–æ–≥—É –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å, –Ω–æ –≤ —Å–∫–æ—Ä–æ–º –≤—Ä–µ–º–µ–Ω–∏ –∑–¥–µ—Å—å –ø–æ—è–≤–∏—Ç—Å—è –Ω–æ–º–µ—Ä –∫–æ–ª–ª-—Ü–µ–Ω—Ç—Ä–∞, –∫—É–¥–∞ –≤—ã –º–æ–∂–µ—Ç–µ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è.'

spravka = [
    "–°–ø—Ä–∞–≤–∫–∞, —á—Ç–æ —Å—Ç—É–¥–µ–Ω—Ç",
    "–°–ø—Ä–∞–≤–∫–∞-–≤—ã–∑–æ–≤",
    "–°–ø—Ä–∞–≤–∫–∞ –æ–± –æ–±—É—á–µ–Ω–∏–∏ (–ø–µ—Ä–∏–æ–¥–µ)",
    "–°–ø—Ä–∞–≤–∫–∞ –æ —Ä–∞–∑–º–µ—Ä–µ —Å—Ç–∏–ø–µ–Ω–¥–∏–∏",
    "–°–ø—Ä–∞–≤–∫–∞ –≤ –≤–æ–µ–Ω–∫–æ–º–∞—Ç",
]

grants = [
    "—Ä–∞–∑–º–µ—Ä —Å—Ç–∏–ø–µ–Ω–¥–∏–∏",
    "—Å–æ—Ü–∏–∞–ª—å–Ω–∞—è —Å—Ç–∏–ø–µ–Ω–¥–∏—è",
    "–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç–∏–ø–µ–Ω–¥–∏–∏",
]

dekanat=[
    "—á–∞—Å—ã —Ä–∞–±–æ—Ç—ã –¥–µ–∫–∞–Ω–∞—Ç–∞",
    "–≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –¥–µ–∫–∞–Ω–∞—Ç–∞",
    "—Å–≤—è–∑—å —Å –¥–µ–∫–∞–Ω–∞—Ç–æ–º",
    "—Ç–µ–ª–µ—Ñ–æ–Ω –¥–µ–∫–∞–Ω–∞—Ç–∞"
]

combines_prompt_array=spravka + grants + dekanat


@router_Survey.callback_query(F.data == "table")
async def cmd_question(callback: types.CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.answer(
        text="–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ø–æ—è–≤–∏—Ç—Å—è –≤ –±–æ—Ç–µ –ø–æ–∑–¥–Ω–µ–µ\n–ñ–¥–µ–º –∏ –≤–µ—Ä–∏–º –≤ –º–æ–∏—Ö —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤!üíª")
    await callback.answer()


@router_Survey.callback_query(F.data == "wi-fi")
async def cmd_wifi(callback: types.CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.answer(
        text="–°–µ—Ç—å: samgtu_emp –ø–∞—Ä–æ–ª—å: ooChaThee4\n"
        "–°–µ—Ç—å: samgtu_student –ø–∞—Ä–æ–ª—å: cueX2CBH\n"
        "–°–µ—Ç—å: samgtu_guest –ø–∞—Ä–æ–ª—å:see8Zu6k")
    await callback.answer()


@router_Survey.callback_query(F.data == "question")
async def cmd_question(callback: types.CallbackQuery, state: FSMContext):
    await state.set_state(Survey.question)
    await callback.message.answer(text="–ö–∞–∫–æ–π —É —Ç–µ–±—è –≤–æ–ø—Ä–æ—Å?")


@router_Survey.message(Survey.question)
async def handle_question(message: types.Message, state: FSMContext):
    try:
        user_message_text=message.text
        if not user_message_text or not user_message_text.strip():
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å.")
            return

        if user_message_text.startswith('/'):
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤. –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ –¥–æ—Å—Ç—É–ø–Ω—ã —á–µ—Ä–µ–∑ –º–µ–Ω—é.")
            return
        
        user_message = user_message_text.lower()

        if len(user_message) > 100:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ—Ä–æ—á–µ 100 —Å–∏–º–≤–æ–ª–æ–≤.")
            await state.set_state(Survey.question)
            return

        if re.search(r"[<>{}$#@&*!%\\/|^`~;\]\[\(\)]|\s{2,}|[\U0001F300-\U0001F6FF\U0001F1E0-\U0001F1FF]", user_message):
            await message.answer(text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç –±–µ–∑ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤.")
            await state.set_state(Survey.question)
            return

        if "—Å–ø—Ä–∞–≤–∫–∞" in user_message:
            await message.answer("–£—Ç–æ—á–Ω–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∫–∞–∫–∞—è —Å–ø—Ä–∞–≤–∫–∞:", reply_markup=make_row_keyboard(spravka))
            await state.set_state(Survey.direct_to_LLM)
        elif "—Å—Ç–∏–ø–µ–Ω–¥–∏—è" in user_message:
            await message.answer("–£—Ç–æ—á–Ω–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∫–∞–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç–∏–ø–µ–Ω–¥–∏–∏ —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç:",
                                 reply_markup=make_row_keyboard(grants))
            await state.set_state(Survey.direct_to_LLM)
        elif "–¥–µ–∫–∞–Ω–∞—Ç" in user_message:
            await message.answer("–£—Ç–æ—á–Ω–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∫–∞–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–µ–∫–∞–Ω–∞—Ç–µ —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç:",
                                 reply_markup=make_row_keyboard(dekanat))
            await state.set_state(Survey.direct_to_LLM)
        else:
            await process_general_question(message, state)

    except Exception as e:
        logger.error(f"Unhandled error in handle_question for message '{message.text}': {e}", exc_info=True) # Log traceback
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


@router_Survey.message(Survey.direct_to_LLM)
async def process_general_question(message: types.Message, state: FSMContext):
    await message.answer(text="–í–∞—à –∑–∞–ø—Ä–æ—Å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è")
    try:
        answer = response.find_answer(message.text)
        if not answer:
            # LM did not find an answer
            # Log the unanswered query to Google Sheets
            gs.pass_data([str(datetime.now() + timedelta(hours=SERVER_TIME)), str(message.text)])  # –≤—ã–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö
            await message.answer(text=response_generic, reply_markup=create_keyboard())
        else:
            # LM found a an answer
            await message.answer(text=answer, reply_markup=ReplyKeyboardRemove())
            await message.answer(text="–£ —Ç–µ–±—è –æ—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã?", reply_markup=create_keyboard())
    except Exception as e:
        logger.error(f"Unhandled error in process_general_question for message '{message.text}': {e}", exc_info=True) # Log traceback
        await message.answer(text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")



@router_Survey.message(Survey.direct_to_LLM, F.text.in_(combines_prompt_array))
async def handle_spravka_grants_decanat(message: types.Message, state: FSMContext):
    try:
        answer = response.find_answer(message.text.lower())
        if not answer:
            gs.pass_data([str(datetime.now() + timedelta(hours=SERVER_TIME)), str(message.text)])  # –≤—ã–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö
            await message.answer(text=response_generic, reply_markup=create_keyboard())
        else:
            await message.answer(answer)
            await message.answer("–£ —Ç–µ–±—è –æ—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã?", reply_markup=create_keyboard())
    except Exception as e:
        logger.error(f"Unhandled error in handle_spravka_grants_decanat for message '{message.text}': {e}", exc_info=True) # Log traceback
        await message.answer(text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


